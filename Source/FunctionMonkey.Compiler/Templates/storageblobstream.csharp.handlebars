using System.IO;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;

namespace {{Namespace}}
{
    public static class {{Name}}
    {
        [FunctionName("{{Name}}")]
        public static async Task Run(
            [BlobTrigger("{{BlobPath}}", Connection = "{{ConnectionStringName}}")]Stream stream,
            string name,
            string blobTrigger,
            Uri uri,
            IDictionary<string, string> metadata,
            ILogger log)
        {
            log.LogInformation("Service bus queue trigger function {{Name}} processed a request.");

            string json;
            using(StreamReader reader = new StreamReader(stream))
            {
                json = reader.ReadToEnd();
            }            
            
            {{CommandTypeName}} command = new {{CommandTypeName}} {
                Stream = stream,
                Name = name
            };

            var contextSetter = (FunctionMonkey.Abstractions.IContextSetter)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.IContextSetter));
            contextSetter.SetBlobContext(blobTrigger, uri, metadata);
            
            var result = await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command);
            // The result will be useful when we want to include outputs too
        }
    }
}
